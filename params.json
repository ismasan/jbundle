{"name":"Jbundle","body":"## JBundle\r\n\r\nRuby utility to help in developing JavaScript libraries. Lets you declare JavaScript libraries composed of multiple files. Easily bundle and minify your JavaScript bundles when you're done. Includes a Rack server for easy testing.\r\n\r\n## Installation\r\n\r\nJBundle is a Ruby gem.\r\n\r\n    gem install jbundle\r\n\r\n## Usage\r\n\r\nDefine a set of javascript files to bundle and minify\r\n\r\n```ruby\r\nJBundle.config do\r\n  version '1.6.1'\r\n\r\n  src_dir File.dirname(__FILE__) + '/src'\r\n\r\n  bundle 'foo.js' do\r\n    file 'file1.js'\r\n    file 'file2.js'\r\n  end\r\n\r\n  bundle 'foo2.js' do\r\n    file 'file3.js'\r\n    file 'file4.js'\r\n  end\r\n\r\n  file 'file4.js'\r\n\r\n  file 'text.txt'\r\n  \r\n  # Filters can be use for string substitution\r\n  filter do |src, config|\r\n    src.gsub(/<VERSION>/, config.version)\r\n  end\r\n  \r\n  target_dir 'dist'\r\n\r\nend\r\n```\r\n\r\nThen write them to the configured target directory\r\n\r\n    JBundle.write!\r\n    \r\nJBundle.write! returns an array of paths of all files written.\r\n    \r\nThis will write the following files:\r\n\r\n    'dist/1.6.1/foo.js'\r\n    'dist/1.6.1/foo.min.js'\r\n    'dist/1.6.1/foo2.js'\r\n    'dist/1.6.1/foo2.min.js'\r\n    'dist/1.6.1/file4.js'\r\n    'dist/1.6.1/file4.min.js'\r\n    'dist/1.6.1/text.txt'\r\n    \r\n    'dist/1.6/foo.js'\r\n    'dist/1.6/foo.min.js'\r\n    'dist/1.6/foo2.js'\r\n    'dist/1.6/foo2.min.js'\r\n    'dist/1.6/file4.js'\r\n    'dist/1.6/file4.min.js'\r\n    'dist/1.6/text.txt'\r\n    \r\nOr you can build a single bundle/file dynamically (ie. for testing, or for serving and caching on first serve)\r\n\r\n```ruby\r\nJBundle.config_from_file './JFile'\r\nJBundle.build('foo.js').src\r\n```\r\n\r\nOr\r\n\r\n```ruby\r\nJBundle.config_from_file './JFile'\r\nJBundle.build('foo.js').min\r\n```\r\n\r\nYou can bundle licenses in bundles. Licenses will not be minified even though they end up being part of minified files\r\n\r\n```ruby\r\nbundle 'foo2.js' do\r\n  license 'license.txt'\r\n  file 'file3.js'\r\n  file 'file4.js'\r\nend\r\n```\r\n\r\nAll defined filters will run on the src for all these cases.\r\n\r\n## Versioned file names, jQuery style\r\n\r\nAll of the examples above bundle to versioned directories in the \"dist\" directory. If you want jQuery-style file names, where there's no version directory and the version number is part of the file name, you can do this:\r\n\r\n```ruby\r\nversion '1.6.1', :directory => false\r\n    \r\nbundle 'foo.js' => 'foo2-[:version].js' do\r\n  license 'license.txt'\r\n  file 'file3.js'\r\n  file 'file4.js'\r\nend\r\n```\r\n\r\nThat will produce:\r\n  \r\n    'dist/foo-1.6.1.js'\r\n    'dist/foo-1.6.1.min.js'\r\n    'dist/foo-1.6.js'\r\n    'dist/foo-1.6.min.js'\r\n    \r\nThat works for single-file libraries too:\r\n\r\n```ruby\r\nfile 'jquery.lightbox.js' => 'jquery.lightbox-[:version].js'\r\n```\r\n\r\n## Filters\r\n\r\nYou can filter both minified and un-minified source and license content with the filter method\r\n\r\n```ruby\r\n# Filters can be use for string substitution\r\nfilter do |src, config|\r\n  src.gsub(/<VERSION>/, config.version)\r\nend\r\n```\r\n\r\nYou can declare filters that run on un-minified output only\r\n\r\n```ruby\r\nfilter :src do |src, config|\r\n  src.gsub(/<SRC_MODE>/, 'full source')\r\nend\r\n```\r\n\r\n... And minified output only\r\n\r\n```ruby\r\nfilter :min do |src, config|\r\n  src.gsub(/<SRC_MODE>/, 'minified source')\r\nend\r\n```\r\n\r\nAll filters must return a copy of the source, so use src.gsub instead of src.gsub!\r\n\r\n\r\n## JFile\r\n\r\nYou can add configuration in a JFile in the root of your project.\r\n\r\n```ruby\r\nversion '1.0.1'\r\n\r\nsrc_dir './'\r\n\r\nbundle 'foo.js' do\r\n  license 'license.txt'\r\n  file 'file1.js'\r\n  file 'file2.js'\r\nend\r\n\r\nfile 'page.html'\r\n\r\nfilter do |src, config|\r\n  src.gsub! /<VERSION>/, config.version.to_s\r\nend\r\n\r\ntarget_dir 'dist'\r\n```\r\n\r\nThen you can bundle everything up with the command line tool\r\n\r\n    $ jbundle\r\n    \r\nYou can run arbitrary code after writing all versioned files by registering an after_write block in your JFile. The following example copies a .swf file from the src dir to all versioned directories\r\n\r\n```ruby\r\nafter_write do |config|\r\n\r\n  config.version.releaseable.each do |version|\r\n    from = \"#{config.src_dir}/foo.swf\"\r\n    to = \"#{config.target_dir}/#{version}/foo.swf\"\r\n    puts \"copying #{to}\"\r\n    FileUtils.cp(from, to)\r\n  end\r\n\r\nend\r\n```\r\n\r\nconfig.version.releaseble returns an array with with all created versions (ie. ['1.6.1', '1.6'] or just ['1.6.1-pre'] for prereleases).\r\n\r\nFiles in subdirectories in the src directory will keep the local directory tree, so\r\n\r\n```ruby\r\nfile 'foo/text.txt'\r\n```\r\n\r\nEnds up as ./dist/1.6/foo/text.txt and ./dist/1.6.1/foo/text.txt\r\n\r\nYou can also copy to a different file name in the target directory using hash notation\r\n\r\n```ruby\r\nfile 'foo/text.txt' => 'bar.txt'\r\n```\r\n\r\n## Pre-releases\r\n\r\nIf you want a prerelease not to overwrite the previous point release, suffix it with \"-pre\", as in:\r\n\r\n```ruby\r\nversion '1.0.1-pre'\r\n```\r\n\r\n## Test server\r\n\r\nJBundle command-line comes with a built-in Rack server that makes it easy to test you JavaScript bundles as you develop them.\r\n\r\n    jbundle server\r\n    \r\n    Starting test server on http://localhost:5555. Available bundles:\r\n    - /foo.js\r\n    Run tests on ./tests/index.html\r\n    \r\nThat serves JavaScript bundles defined in your JFile in port 5555. Pass the -p option for a different port. ./tests/index.html runs your tests (Qunit by default) in the ./tests directory\r\n\r\nYou can chose what testing framework to use when initialising the project. Options are qunit and jasmine.\r\n\r\n    jbundle init foo.js --tests=jasmine\r\n\r\nLearn more about the JBundle command-line with\r\n\r\n    jbundle help # all commands\r\n    jbundle help server # server command options\r\n\r\n## Generator\r\n\r\nThe command line has a quick generator that creates stub files for your library code, an example file and tests using Qunit.   \r\n\r\n    jbundle init my_library.js\r\n    \r\n    create  JFile\r\n          create  src\r\n          create  src/license.txt\r\n          create  src/my_library.js\r\n          create  test\r\n          create  test/index.html\r\n          create  test/tests.js\r\n          create  test/qunit.js\r\n          create  test/qunit.css\r\n          create  dist\r\n    Done. Try it!\r\n\r\n        jbundle s\r\n        open test/index.html\r\n        \r\nAt the moment only Qunit (default) and Jasmine are supported in the generator but others would be easy to add.\r\n\r\nTo generate jasmine test stubs, run the command with `-t jasmine`\r\n\r\nIf you don't need the test stubs run the command with `--no-tests`\r\n\r\n## TODO\r\n\r\n- DRY up stuff, better error handling for missing config\r\n    ","tagline":"Bundle and minify JavaScript projects","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}